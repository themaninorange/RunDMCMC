# REQUIRED
[GRAPH_SOURCE]
# name of graph file 
gSource = ./testData/PA_graph_with_data.json

# REQUIRED
[GRAPH_DATA]
# unique identifier
ID = wes_id
# graph data required for MCMC
perim = PERIM
area = ALAND10
pop = POP100
cd = CD

# NOT REQUIRED
[VOTE_DATA_SOURCE]
# must be csv, geojson, or shapefile format at the moment
vSource = ./testData/wes_merged_data.shp
vSourceID = wes_id

# NOT REQUIRED
[VOTE_DATA]
# name unimportant, just list the columns with voting data that will be kept track of
col1 = voteA
col2 = voteB

# NOT REQUIRED
[VALIDITY]
# NOTE: for the full list of functions and their args, see validity.py
validator1 = no_vanishing_districts
validator2 = fast_connected
validator3 = within_percent_of_ideal_population
# note: this requires polsby-popper as an updater
validator4 = L1_reciprocal_polsby_popper

# NOT REQUIRED
[EVALUATION_SCORES]
# NOTE: for the full list of functions and their args, see scores.py
# at the moment, list the function name followed by the name of the
# column it is supposed to use. For example: 
# efficiency_gap uses 2 column names, and in the 
#update = flips
update1 = efficiency_gap,voteA,voteB
update2 = mean_median,voteA
update3 = mean_thirdian,voteA
update4 = L1_reciprocal_polsby_popper

# NOT REQUIRED
[MARKOV_CHAIN]
num_steps = 1000
proposal = propose_random_flip
accept = always_accept

# NOT REQUIRED -- ALSO NOT TOTALLY SUPPORTED AT THIS POINT
[EVALUATION_SCORES_DATA]
evalScoreLogType = pipe_to_table
#evalScoreLogType = flips_to_dict
vistype = hist_of_table_scores
#vistype = log_dict_as_json
#savefilename = outputfile.json
savefilename = outputfile.png
